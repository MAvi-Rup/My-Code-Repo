/*
 * Catch any uncaught errors and report them to the server.
 *
 * This code is designed to have as few dependencies as possible; it now relies
 * only on jQuery. It is placed at the top of this file in order to also catch
 * errors that occur in PA initialization.
 *
 * Everything is wrapped in a closure in order to avoid polluting the global
 * namespace and to insulate the code.
 */
var err_count = 0;
window.onerror = (function() {
  var MAX_COUNT = 2;
  var API_URL = '/logic/api?method=generic.report_js_error&aid=' +
    (new Date()).getTime().toString(36) + Math.round(Math.random() * 1679616).toString(36);

  var reportError = function(params) {
    err_count++;
    if(err_count > MAX_COUNT) {
      return;
    }
    if (params.message && typeof(params.message) == 'string' && params.message.indexOf("Error connecting to extension") >= 0) return; // we don't want these
    params.location = window.location.toString();
    var csrfToken = window.CSRF_TOKEN || "";
    if(PA && PA.user && PA.user.id) {
      params.uid = PA.user.id;
    }
    $.ajax({
      contentType: "application/json",
      url: API_URL,
      data: JSON.stringify({
        'method': 'generic.report_js_error',
        'params': params
      }),
      type: 'POST',
      dataType: 'json',
      headers: {
        "CSRF-Token": csrfToken
      }
    });
  };

  // catch uncaught JS exceptions (the actual window.onerror)
  return function(message, url, line) {
    reportError({
      type: 'js_exception',
      message: message,
      url: url,
      line: line
    });
  };
})();
var dataLayer = [];
PA = {
  apiCache: {},
  eventsToLog: [],
  staticContent: false,
  cookie: false,
  users: {},
  user: {},
  othersId: 0,
  userQueue: [],         // all users I don't know, but need to get
  userCallback: [],
  logApiTimeData: [],
  callQueue: [],
  studentView: false,
  isMac: false,
  cacheUser: function(user) {
    if (user.config && user.config.endorser)
      user.endorser = user.config.endorser;
    //PA.users[user.id] = user;
  },

  getCached: function(method, params){
    var cacheKey = method + JSON.stringify(params);
    return PA.apiCache[cacheKey];
  },
  cache: function(method, params, result){
    var cacheKey = method + JSON.stringify(params);
    PA.apiCache[cacheKey] = result;
  },
  regularError: function(err) {
    if (err.indexOf("Session needed") >= 0 || err.indexOf("Not logged in") >= 0) {
      PEM.fire("user_logout");
    } else {
      PEM.fire("error", err);
    }
  },
  badError: function() {
    PEM.fire("timeout");
    if (typeof(console) != 'undefined') console.log("Cannot communicate with main Piazza server. Check your internet connection, or try again later.");
  },
  checkSession: function(err, method) {
    if (method === "user.check_session") return;

    /* When we get session-related errors, check that this client hasn't been logged out in another window. */
    if (err.indexOf("No permission") >= 0 || err.indexOf("Your session is not active") >= 0 || err.indexOf("Action not allowed for unknown users") >= 0) {
      PA.call_pj("user.check_session", {}, 1, function(data) {
        if (data.id !== PA.user.id) { /* Server and client do not match user IDs! */
          //PD.triggerLogoutWarning();
          PEM.fire("user_logout");
        }
      }, function(err) {
        if (err.indexOf("Your session is not active") >= 0) { /* No user logged in, trigger warning. */
          PEM.fire("user_logout");
          //PD.triggerLogoutWarning();
        }
      });
    }
  },
  setSpinnerMessage: function(message) {
    PA.spinnerMessage = message;
  },
  call_pj: function(method, params, blockObject, callback, error, scope) {
    function _unblock() {
      if (blockObject !== 1) {
        if (blockObject && blockObject.unblock) {
          blockObject.unblock();
        } else {
          $.unblockUI();
        }
        PA.spinnerMessage = null;
      }
    }
    var start = new Date().getTime();
    //if (typeof(console) != 'undefined') console.log("PA.call_pj method:" + method + ", params:" + JSON.stringify(params));
    var cached = PA.getCached(method, params);
    if(callback && cached && !cached.error && cached.result){  //don't return cached errors
       callback.call(scope, cached.result, cached.aid);
       return;
    }
    if(!window.CSRF_TOKEN){
      PA.callQueue.push({method:"call_pj", args:[method, params, blockObject, callback, error, scope]});
      return;
    }
    if (PA.cookie)
      params.cookie = PA.cookie;
    var csrfToken = window.CSRF_TOKEN;
    var data;

    if (PA.eventsToLog.length > 0) {
      data = JSON.stringify({method:method, params:params, logdata:{logevents:PA.eventsToLog}});
      PA.eventsToLog = [];
    }
    else
      data = JSON.stringify({method:method, params:params});

    data = data.replace(/\\u000a/gi, "\\n");
    if (blockObject !== 1) {
      var msg = PA.spinnerMessage ? {
        message: "<h3>" + PA.spinnerMessage + "</h3>",
        css: {"margin-top": "-60px", color: "#555", "font-size": "18px", width: "100%"}
      } : null;
      if (blockObject && blockObject.block) {
        blockObject.block(msg);
      } else {
        $.blockUI(msg);
      }
    }
    if (PA.staticContent && method != "network.search" && method != "network.filter_feed") {
      var path = "/static/" + PA.staticContent + "/" + method;
      if (params.cid)
        path += "/" + params.cid;
      path += "?t=" + (new Date()).getTime();
      $.ajax({
        contentType: "application/json",
        url: path,
        type: 'GET',
        headers: {
          "CSRF-Token": csrfToken
        },
        success: function(data) {
          _unblock();
          if (data.result && callback)
            callback.call(scope, data.result, "static");

          var end = new Date().getTime();
          var elapsedTime = end - start;
          PA.writeApiTimeData(method,elapsedTime,params);
        },
        error: _unblock
      });
    } else {
      $.ajax({
        contentType: "application/json",
        url: '/logic/api?method=' + method + '&aid=' + (new Date()).getTime().toString(36) + Math.round(Math.random() * 1679616).toString(36),
        data: data,
        contentType: "application/json; charset=utf-8",
        headers : {
          "CSRF-Token" : csrfToken
        },
        success: function(data) {
          _unblock();
          if ((data.result || data.result === 0) && callback)
            callback.call(scope, data.result, data.aid);
          if (data.error) {
            if (data.error == "Please authenticate") {
              data.error = "Your session is not active. Please log in to Piazza to continue.";
            }
            if (error)
              error.call(scope, data.error);
            else
              PA.regularError(data.error);

            PA.checkSession(data.error, method);
          }
          var end = new Date().getTime();
          var elapsedTime = end - start;
          PA.writeApiTimeData(method,elapsedTime,params,data.aid);
        },
        error: function(req, status, err) {
          if (req.status > 0 && req.status < 500) {
            if (error)
              error.call(scope, err);
            else
              PA.regularError(err);
            PA.checkSession(err, method);
            return;
          }
          // try again first
          setTimeout(function(){
            $.ajax({
              contentType: "application/json",
              url: '/logic/api?method=' + method + '&aid=' + (new Date()).getTime().toString(36) + Math.round(Math.random() * 1679616).toString(36),
              data: data,
              headers: {
                "CSRF-Token": csrfToken
              },
              success: function(data) {
                _unblock();
                if (data.result && callback)
                  callback.call(scope, data.result, data.aid);
                if (data.error) {
                  if (error)
                    error.call(scope, data.error);
                  else
                    PA.regularError(data.error);
                }
                var end = new Date().getTime();
                var elapsedTime = end - start;
                PA.writeApiTimeData(method,elapsedTime,params,data.aid);
              },
              error: function(req, status, error) {
                _unblock();
                PA.badError(error);
              }
            });
          }, 3000);
        }
      });
    }
  },

  call: function(method, params, blockObject, callback, error, scope) {
    //XXXXXXXXXXXX
    if(!window.CSRF_TOKEN){
      PA.callQueue.push({method:"call", args:[method, params, blockObject, callback, error, scope]});
      return;
    }
    var start = new Date().getTime();
    if (PA.cookie)
      params.cookie = PA.cookie;
    var csrfToken = window.CSRF_TOKEN;
    var data = JSON.stringify({method:method, params:params});
    data = data.replace(/\\u000a/gi, "\\n");
    //if (typeof(PD) != 'undefined' && PD.loading)
    //  blockObject = 1; // do not show any block objects while loading
    //if (PA.user && PA.user.config && PA.user.config.no_spinner)
    //  blockObject = 1;
    if (blockObject) {
      if (blockObject != 1 && blockObject.block) blockObject.block();
    } else
      $.blockUI();
    if (PA.staticContent && method != "network.search") {
      var path = "/static/" + PA.staticContent + "/" + method;
      if (params.cid)
        path += "/" + params.cid
      path += "?t=" + (new Date()).getTime();
      $.ajax({
        contentType: "application/json",
        url: path,
        type: 'GET',
        headers: {
          "CSRF-Token": csrfToken
        },
        success: function(data) {
          if (blockObject) {
            if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
          } else
            $.unblockUI();
          if (data.result && callback)
            callback.call(scope, data.result, "static");

          var end = new Date().getTime();
          var elapsedTime = end - start;
          PA.writeApiTimeData(method,elapsedTime,params,data.aid);
        },
        error: function(req, status, error) {
          if (blockObject && blockObject != 1)
            if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
          else
            $.unblockUI();
        }
      });
    } else {
      $.ajax({
        contentType: "application/json",
        data: data,
        headers: {
          "CSRF-Token": csrfToken
        },
        success: function(data) {
          if (blockObject) {
            if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
          } else
            $.unblockUI();
          if (data.result && callback)
            callback.call(scope, data.result, data.aid);
          if (data.error) {
            if (error)
              error.call(scope, data.error);
            else
              PA.regularError(data.error);
          }
          var end = new Date().getTime();
          var elapsedTime = end - start;
          PA.writeApiTimeData(method,elapsedTime,params,data.aid);
        },
        error: function(req, status, error) {
          if (blockObject && blockObject != 1)
            blockObject.unblock();
          else
            $.unblockUI();
        }
      });
    }
  },
  writeApiTimeData: function(method,elapsedTime,params,aid) {
    if (method == "log.write_time_data")
      return;
    if (typeof(DO_LOG_BOOMERANG_DATA) == 'undefined' || DO_LOG_BOOMERANG_DATA == 0)
      return;
    PA.logApiTimeData.push([method,elapsedTime,params,aid]);
    if (PA.logApiTimeData.length >= 5) {
      var params = {
        timeData: PA.logApiTimeData
      };
      PA.call_pj("log.write_time_data", params, 1);
      PA.logApiTimeData = [];
    }
  },
  writeBoomrData: function(boomrObj, params) {
    if (typeof(DO_LOG_BOOMERANG_DATA) == 'undefined' || DO_LOG_BOOMERANG_DATA == 0)
      return;
    var loadJsRegex = /,t_load_js\|(\d+),/;
    var loadJsTimeMatch = boomrObj["t_other"].match(loadJsRegex);
    var loadJsTime = "";
    if (loadJsTimeMatch && loadJsTimeMatch.length > 1) {
      loadJsTime = loadJsTimeMatch[1];
    }
    var params = {
      perceivedLoadTime: boomrObj["t_done"],
      pageReady: boomrObj["t_page"],
      url: boomrObj["u"],
      aid: params["aid"],
      method: params["method"],
      http_verb: params["http_verb"],
      loadJsTime: loadJsTime
    };
    PA.call_pj("log.write_boomerang_data", params, 1);
  },
  getOthersList: function(uids, othersAnon, replaceId, othersA) {
    // if we have info about all users, return now. Otherwise, get info and then return.
    PA.othersId += 1;
    var title = "";
    var missing = [];
    for (var i = 0; i < uids.length; i++) {
      var id = uids[i];
      if (PA.users[id]) {
        title += (title.length > 0 ? "<br>" : "") + PA.users[id].name.replace(/'/,"&apos;").replace(/"/,"&quot;");
        if (othersAnon && othersAnon[i] == "stud") {
          var atitle = "";
          if (P.note_view.content.anon_map && P.note_view.content.anon_map[id])
            atitle = " " + PA.getAnonymousIcon(P.note_view.content.anon_map[id]).title;
          title += ' (Anon.' + atitle + ' to classmates)';
        }
      } else if (id == "undefined") {
        var iconTitle = "";
        if (othersA && othersA[i])
          iconTitle = " " + PA.getAnonymousIcon(othersA[i]).title;
        title += (title.length > 0 ? "<br>" : "") + "Anonymous" + iconTitle;
      } else if (id == "Instructors") {
        title += (title.length > 0 ? "<br>" : "") + "Instructors";
      } else {
        missing.push(id);
      }
    }
    if (missing.length > 0 && !replaceId) {
      // get missing users, and register callback
      var myId = PA.othersId;
      PA.loadUsers(missing, function() {
        PA.getOthersList(uids, othersAnon, 'others_' + myId, othersA);
      });
      return "<a href='#' data-pats='multiple_contributors_popover' onclick='return false;' class='others' title='loading...' id='others_" + myId + "'>" + uids.length + " others</a>";
    } else {
      var str = "<a href='#' data-pats='multiple_contributors_popover' onclick='return false;' class='others' id='" + replaceId + "' title='" + title + "'>" + uids.length + " others</a>";
      if (replaceId) {
        $('div.tooltip.in').remove();
        $('#' + replaceId).replaceWith(str);
        $('#' + replaceId).tooltip({placement: 'left', html: true});
      }
      return str;
    }
  },
  getUserName: function(id, anon, my_private_post, incognito_text, is_followup, anonId) {
    if (id == "Instructors")
      return '<span class="user_name">Instructors</span>';
    var html = '';
    html += '<div anon="' + anon + '" anonid="' + anonId + '" class="user_name user_name_' + id ;
    if (is_followup)
      html += " is_followup";
    if (anon == "me") {
      if (id == PA.user.id) {
        html += '">You' + PA.getUserBadge(PA.user) + '</div>';
        return html;
      }
      anon = "no";
    }
    if (id && (!anon || anon != "full" || id != PA.user.id ) && id != "undefined") {
      if (PA.users[id]) {
        var uname = PA.users[id].name.replace(/'/,"&apos;").replace(/"/,"&quot;")
        if (anon  == "stud"){
          var title = "";
          if (!anonId && P.note_view.content.anon_map && P.note_view.content.anon_map[id])
            anonId = P.note_view.content.anon_map[id];
          if (anonId) title = " " + PA.getAnonymousIcon(anonId).title;
          html += ' user_name_anon anon_box_color">' + uname + '</div><span class="smallText">&nbsp;(Anon.' + title + ' to classmates)</span>' + PA.getUserBadge(PA.users[id]);
        } else {
          if (PA.shouldAddProfPopover(PA.users[id])) {
              //html += '"><a class="view-profile-link" href="#" onClick="PEM.fire(\'showUserProfile\', \'' + id + '\');return false;" target="_self">' + PA.users[id].name + '</a></span>';
              html += '"><span class="name_wrapper">' + uname + PA.getUserBadge(PA.users[id]) + '</span>';
              html += PA.getProfilePopoverHtml(PA.users[id], is_followup) + '</div>';
          } else {
            html +=  '">' + uname + PA.getUserBadge(PA.users[id]) + '</div>';
          }
        }
      } else {
        html += ' user_loading">Loading...</div>';
        PA.loadUser(id);
      }
    } else if (my_private_post && anon == "stud") {
      if (incognito_text) {
        html += ' user_name_anon anon_box_color" notutorial="anonymous to classmates">you' + PA.getUserBadge(PA.user) + '</div>';
      } else {
        html += ' user_name_anon anon_box_color" notutorial="anonymous to classmates">' + PA.user.name + PA.getUserBadge(PA.user) + '</div>';
      }
    } else {
      if (anonId && P.note_view.content) {
        var icon = PA.getAnonymousIcon(anonId);
        html += ' ">Anonymous ' + icon.title + '</div>';
      } else {
        html += ' ">Anonymous </div>';
      }
    }
    return html;
  },
  getProfilePopoverHtml: function(usr, is_followup) { //assumes id exists in PA.users[id]
    if (!usr.profile) return "";
    var popoverTemplate = PTM.getTemplate('student_classmate_popover');
    var popoverContext = PA.getPopoverContext(usr);
    var html = popoverTemplate(popoverContext);
    if(is_followup) html = html.replace("student_popover", "student_popover student_popover_right");
    return html;
  },
  getPopoverContext: function(usr) {
    var imagePath = 'https://dvngeac8rg9mb.cloudfront.net/images/dashboard/common/default_user.png';
    if (usr.photo_url){
      imagePath = usr.photo_url;
    }
    var academics = usr.profile.academics;
    if (!academics) academics = {};
    var classes = [];
    var workedAt = [];
    for (var nid in usr.profile.all_classes) {
      var c = usr.profile.all_classes[nid];
      classes.push({isTA:c.is_ta, isTS:c.is_top, number:c.num, name:c.name, term:c.term})
    }
    classes.sort(function(a,b){
      if (a.isTA && !b.isTA) return -1;
      if (b.isTA && !a.isTA) return 1;
      if (a.isTS && !b.isTS) return -1;
      if (b.isTS && !a.isTS) return 1;
      if (a.number > b.number) return 1;
      if (a.number < b.number) return -1;
      return 0;
    });
    var classesMore = 0;
    if (classes.length > 3) {
      classesMore = classes.length - 3;
      classes.splice(3, classesMore);
    }
    if (!usr.profile.work_experience) usr.profile.work_experience = [];
    for (var i = 0; i < usr.profile.work_experience.length; i++) {
      var exp = usr.profile.work_experience[i];
      workedAt.push(exp);
    }
    var workedMore = 0;
    if (workedAt.length > 2) {
      workedMore = workedAt.length - 2;
      workedAt.splice(2, workedMore);
    }
    return {
      name: usr.name,
      id: usr.id,
      nid: P.modules.network.id,
      studentStatus: academics.program,
      gradMonth: academics.grad_month_str,
      gradYear: academics.grad_year,
      major: academics.major,
      imgUrl: imagePath,
      classes: classes,
      classesMore: classesMore,
      workedAt: workedAt,
      workedMore: workedMore,
      canShow: PA.user.config.published
    }
  },
  getAnonymousIcon: function(id) {
    var nr = parseInt(id.replace("a_", "")) + 1;
    var rnd = P.note_view.content.id.charCodeAt(P.note_view.content.id.length - 1);
    var bigPrimes = [23, 29, 31, 37]; // 36 primes
    var idx = bigPrimes[rnd % bigPrimes.length] * nr + rnd;
    var names = ['anon_icon-01', 'anon_icon-02', 'anon_icon-03', 'anon_icon-04', 'anon_icon-05', 'anon_icon-06', 'anon_icon-07', 'anon_icon-08', 'anon_icon-09'];
    var namesC = ['Atom', 'Helix', 'Mouse', 'Beaker', 'Calc', 'Comp', 'Gear', 'Scale', 'Poet'];
    var level = parseInt((nr - 1) / names.length);
    var title = namesC[idx % names.length];
    if (level > 0) {
      title += " " + (level + 1);
    }
    return {icon:names[idx % names.length], title:title};
  },
  getUserPic: function(id, id_a) {
    var no_resize = false;
    var no_border = false;
    var resize = (no_resize) ? '' : 'onload="onImageLoad(event);"';
    var border = (no_border) ? 'no_border' : 'white_border';
    var html = '<div class="user_pic user_pic_' + id ;
    if (id && id != "0") {
      if (PA.users[id]) {
        var imagePath = 'https://dvngeac8rg9mb.cloudfront.net/images/dashboard/common/default_user.png';
        if (PA.users[id].email == 'admin') imagePath = '/images/dashboard/common/nerd_small.png';
        if(PA.users[id].photo_url){
          imagePath = PA.users[id].photo_url;
        } else if (PA.users[id].facebook_id){
          imagePath = 'https://graph.facebook.com/' + PA.users[id].facebook_id + '/picture?type=square';
        }
        html += '"><div class="' + border + '"><img title="' + PA.users[id].name.replace(/"/g, '&quot;') + '" src="' + imagePath + '" ' + resize + ' /></div>';
      } else {
        html += ' user_loading">&nbsp;';
        PA.loadUser(id);
      }
    } else {
      if (id_a && P.note_view.content) {
        var icon = PA.getAnonymousIcon(id_a);
        html += '"><div class="' + border + '"><img title="Anonymous ' + icon.title + '" src="/images/dashboard/common/anon_icons/' + icon.icon + '.jpg" ' + resize + ' /></div>';
      } else {
        html += '"><div class="' + border + '"><img title="Anonymous" src="https://dvngeac8rg9mb.cloudfront.net/images/dashboard/common/default_anonymous.png" ' + resize + ' /></div>';
      }
    }
    html += "</div>";
    return html;
  },
  getUserBadge: function(user) {
//
//        <span class="answer_badge piazza_badge"></span>
//        <span class="answer_badge class_badge"></span>
//
    var str = "";
    // verify that this user is not instructor in this class
    if (PA.profs && PA.profs[user.id]) return str;
    if (user.endorser && user.endorser.global)
      str += '<span class="answer_badge piazza_badge"></span>';
    if (user.endorser && user.endorser[P.modules.network.id])
      str += '<span class="answer_badge class_badge"></span>';
    return str;
  },
  setUserPic: function(usr) {
    $('.user_name_' + usr.id).each(function(){
      var is_followup = $(this).hasClass("is_followup");
      var userHtml = usr.name;
      if (PA.shouldAddProfPopover(usr)) {
        userHtml = '<span class="name_wrapper">' + usr.name+'</span>';
        userHtml += PA.getProfilePopoverHtml(usr, is_followup);
      }
      //if (P.modules.network.type != 'group'  && !P.modules.network.prof_hash[usr.id])
      //  userHtml = '<a class="view-profile-link" href="#" onClick="PEM.fire(\'showUserProfile\', \'' + usr.id + '\');return false;" target="_self">' + usr.name + '</a>';
      var anonId = $(this).attr("anonid");
      if ($(this).attr("anon") == "stud" && anonId) {
        var title = "";
        if (anonId) title = " " + PA.getAnonymousIcon(anonId).title;
        $(this).html(userHtml + " <span class=\"smallText\">(Anon." + title + " to classmates)</span>" + PA.getUserBadge(usr));
      